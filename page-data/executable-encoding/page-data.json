{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/executable-encoding","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"executable-encoding\"\n  }, \"Executable Encoding\"), mdx(\"p\", null, \"Aqu\\xED intentamos expresar todos los constructores y operadores en t\\xE9rminos de su ejecuci\\xF3n.\"), mdx(\"p\", null, \"As\\xED que podemos modelar los elementos como miembros de una clase y los operadores como m\\xE9todos de esa clase, de tal manera que todo queda encapsulado.\"), mdx(\"p\", null, \"En este caso si queremos n distintas formas de ejecutar un modelo, tendremos n funciones almacenadas dentro de la clase.\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"model\"\n  }, \"Model\"), mdx(\"p\", null, \"Los problemas funcionales no resuelven problemas directamente, sino que se describen a trav\\xE9s de modelos, que luego se interpretan. Estos modelos se representan siempre como inmutables data types.\"), mdx(\"p\", null, \"Los modelos se obtienen a traves de [\", mdx(\"a\", {\n    \"href\": \"constructors\",\n    \"title\": \"Constructors\",\n    \"parentName\": \"p\"\n  }, \"constructors\"), \"] y dependiendo de como se codifique este modelo nos encontramos con dos tipos:\"), mdx(\"ul\", null, mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"[\", mdx(\"a\", {\n    \"href\": \"executable-encoding\",\n    \"title\": \"Executable Encoding\",\n    \"parentName\": \"li\"\n  }, \"Executable Encoding\"), \"]  (final, everything is encoded in its terms of execution).\"), mdx(\"li\", {\n    \"parentName\": \"ul\"\n  }, \"[\", mdx(\"a\", {\n    \"href\": \"declarative-encoding\",\n    \"title\": \"Declarative Encoding\",\n    \"parentName\": \"li\"\n  }, \"Declarative Encoding\"), \"] (initial, everything is encoded as pure data).\")), mdx(\"p\", null, mdx(\"a\", {\n    \"href\": \"#\",\n    \"title\": \"Autogenerated link references for markdown compatibility\",\n    \"parentName\": \"p\"\n  }, \"//begin\"), \": # \\\"Autogenerated link references for markdown\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"a6e28740-a666-5ec2-bbb3-3d023e4d90a2","fields":{"slug":"/model","title":"Model"}}}]},"fields":{"slug":"/executable-encoding","title":"Executable Encoding"}}},"pageContext":{"id":"c74c42af-c257-5884-b689-a299c1497691"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}